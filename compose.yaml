version: '3.8'

services:
  # Backend API Service
  backend-app:
    build:
      context: ./backend-app
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    environment:
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET}
      - DISCORD_REDIRECT_URL=${DISCORD_REDIRECT_URL}
      - JWT_SECRET=${JWT_SECRET}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - SECRET_TOKEN=${SECRET_TOKEN}
    volumes:
      - ./backend-app:/app
      - ./backend-app/djms.db:/app/djms.db
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - djms-network

  # Discord Bot Service
  discord-app:
    build:
      context: ./discord-app
      dockerfile: Dockerfile
    ports:
      - "6969:6969"
    environment:
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - SECRET_TOKEN=${SECRET_TOKEN}
    volumes:
      - ./discord-app:/app
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - djms-network

  # Frontend Service
  frontend-app:
    build:
      context: ./frontend-app
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=${VITE_API_URL}
    volumes:
      - ./frontend-app:/app
      - /app/node_modules
    depends_on:
      - backend-app
    restart: unless-stopped
    networks:
      - djms-network

  # Postgres Service
  postgres:
    image: postgres:17.5-alpine3.22
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - djms-network

  # Caddy Web Server
  caddy:
    image: caddy:2.10-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./conf:/etc/caddy
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - djms-network

networks:
  djms-network:
    driver: bridge

volumes:
  node_modules:
  postgres_data:
  caddy_data:
  caddy_config: